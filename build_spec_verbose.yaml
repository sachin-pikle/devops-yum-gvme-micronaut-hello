#### This file has optional print/echo statements to get more information
#### about the build runner environment before and after the yum install.
#### This information can be helpful in understanding and debugging builds.
version: 0.1
component: build
timeoutInSeconds: 900
runAs: root
shell: bash
env:
  variables:
    "JAVA_HOME" : "/usr/lib64/graalvm/graalvm-java17"
    # PATH is a reserved variable and cannot be defined as a variable.
    # However, PATH can be changed in a build step and the change is visible in subsequent steps.
    TAG: "mn-hello-ni:0.0.1"
    APP_FILE: "MnHelloRest"

  # exportedVariables are made available to use as parameters in sucessor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_HASH parameter set
  exportedVariables:
    - BUILDRUN_HASH

steps:
  - type: Command
    name: "Define unique image tag"
    timeoutInSeconds: 140
    command: |
      echo "OCI_BUILD_RUN_ID: ${OCI_BUILD_RUN_ID}"
      export BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH: " $BUILDRUN_HASH
  - type: Command
    name: "Install the latest Oracle GraalVM for JDK 17 - JDK and Native Image"
    command: |
      yum -y install graalvm-17-native-image
  - type: Command
    name: "Set the PATH here. JAVA_HOME already set in env > variables above."
    command: |
      echo "JAVA_HOME: $JAVA_HOME"
      echo "Before PATH: $PATH"
      export PATH=$JAVA_HOME/bin:$PATH
  - type: Command
    name: "Post-install checks"
    command: |
      echo "JAVA_HOME: $JAVA_HOME"
      echo "After PATH: $PATH"
      printf "Java version:\n $(java -version) \n"
      printf "Native-image version: $(native-image --version) \n"
      printf "Maven version:\n $(./mvnw --version) \n"
      echo "Micronaut version: $(mn --version)"
      echo "Current dir: $(pwd)"
      printf "Current dir contents:\n $(ls -alh) \n"  
  # - type: Command
  #   name: "Example 1: Build a JAR with Oracle GraalVM for JDK 17 - JDK"
  #   command: |
  #     ./mvnw --no-transfer-progress clean package
  # - type: Command
  #   name: "Run mvn clean to remove all generated build files"
  #   command: |
  #     ./mvnw clean
  - type: Command
    name: "Example 2: Build a native executable with Oracle GraalVM for JDK 17 - Native Image"
    command: |
      ./mvnw --no-transfer-progress clean package -Dpackaging=native-image
  - type: Command
    name: "Package the native executable in a runtime container image"
    command: |
      docker build -f ./Dockerfile \
                  --build-arg APP_FILE=${APP_FILE} \
                  -t ${TAG} .
  # - type: Command
  #   name: "Build the native executable and package it in a runtime container image"
  #   command: |
  #     ./mvnw package -Dpackaging=docker-native -Dmicronaut.native-image.base-image-run=gcr.io/distroless/base -Pgraalvm -Dmicronaut.native-image.args="--verbose"
  - type: Command
    name: "Post-packaging checks"
    command: |
      echo "List of docker images:"
      echo "$(docker images)"  
outputArtifacts:
  # - name: app_jar
  #   type: BINARY
  #   location: target/MnHelloRest-0.1.jar
  - name: app_native_executable
    type: BINARY
    location: target/MnHelloRest
  - name: runtime_image
    type: DOCKER_IMAGE
    # this is only the locally exported container image name
    # this location tag doesn't affect the tag used to deliver the container image
    # to the Container Registry.
    location: ${TAG}
